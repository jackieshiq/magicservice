# Global logging properties. 
# ------------------------------------------ 
# The set of handlers to be loaded upon startup. 
# Comma-separated list of class names. 
#handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler

#add the SLF4JBridgeHandler as a logging handler in the logging.properties file
#so that I can continue using log4j.properties to log jersey clases
#handlers=

handlers=java.util.logging.FileHandler

# Default global logging level. 
# Loggers and Handlers may override this level 
#.level=INFO

# Loggers 
# ------------------------------------------ 
# Loggers are usually attached to packages. 
# Here, the level for each package is specified. 
# The global level is used by default, so levels 
# specified here simply act as an override. 
#myapp.ui.level=ALL 
#myapp.business.level=CONFIG 
#myapp.data.level=SEVERE

# Handlers 
# -----------------------------------------

# --- ConsoleHandler --- 
# Override of global logging level 
#java.util.logging.ConsoleHandler.level=SEVERE 
#java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# --- FileHandler --- 
# Override of global logging level 
#java.util.logging.FileHandler.level=ALL
java.util.logging.FileHandler.level=INFO

# Naming style for the output file: 
# (The output file is placed in the directory 
# defined by the "user.home" System property.) 
#java.util.logging.FileHandler.pattern=${catalina.home}/logs/rest2.log
java.util.logging.FileHandler.pattern=c:/apps/rest2.log
java.util.logging.FileHandler.append=true

# Limiting size of output file in bytes: 
#java.util.logging.FileHandler.limit=50000

# Number of output files to cycle through, by appending an 
# integer to the base file name: 
#java.util.logging.FileHandler.count=50

# Style of output (Simple or XML): 
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

# Pattern works since Java 7
java.util.logging.SimpleFormatter.format = [%1$tc] %4$s: %2$s - %5$s %6$s%n